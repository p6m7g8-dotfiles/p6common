##############################################################################
#>
#
# Replaces in unix clis for machines echo
#
#<
##############################################################################
p6_echo() {

    echo "$@"
}

##############################################################################
#>
#
# On screen (stdout) msgs for users
#
#<
##############################################################################
p6_msg() {
    p6_echo "$@"
}

##############################################################################
#>
#
# On screen (stderr) msgs for users
#
#<
##############################################################################
p6_error() {
    p6_msg "$@" >2
}

##############################################################################
#>
#
# Terminate and show user on screen (stdout) msg, exit with code 0-255
#
#<
##############################################################################
p6_die() {
    local code="$1"
    shift

    p6_msg "$@"
    exit $code
}

##############################################################################
#>
#
# Do not call me directly
#
#<
##############################################################################
_p6_header() {
    local indent="$1"
    shift

    local h=""
    local i=0
    while [ $i -lt $indent ]; do
	h="${h}="
	i=$(($i+1))
    done

    p6_msg "$h> $@"
}

##############################################################################
#>
#
# Output "====> $foo" for users on screen in header style indentation
#
#<
##############################################################################
p6_h1() {
    _p6_header  "2" "$@"
}
p6_h2() {
    _p6_header  "4" "$@"
}
p6_h3() {
    _p6_header  "6" "$@"
}
p6_h4() {
    _p6_header  "8" "$@"
}
p6_h5() {
    _p6_header "10" "$@"
}

##############################################################################
#>
#
# Log & 'linewrap' only if debugging
#
# Run
#
# READ
#<
##############################################################################
p6_run_read_cmd() {
    local cmd="$@"

    if p6_debug -o p6_verbose; then
	p6_log "$cmd" | perl -p -e "s, , \\\\\n\t,g"
    fi

    eval "$cmd"
}

##############################################################################
#>
#
# Log & 'linewrap' if debug or dryrun
#
#
# WRITE
#<
##############################################################################
p6_run_write_cmd() {
    local cmd="$@"

    if p6_dryruning; then
	p6_log "$cmd" | perl -p -e "s, , \\\\\n\t,g"
	# XXX: intentional no run
    else
	if p6_debugging; then
	    p6_log "$cmd" | perl -p -e "s, , \\\\\n\t,g"
	fi
	eval "$cmd"
    fi
}

##############################################################################
#>
#
# Replaces return of int
#
#<
##############################################################################
p6_return_int() {
  local int="$1"

  return $int
}

##############################################################################
#>
#
# Replaces return of 0 or 1
#
#<
##############################################################################
p6_return_bool() {
    local bool="$1"

    return $bool
}

p6_return_true() {

    p6_return_bool 0
}

p6_return_false() {

    p6_return_bool 1
}

##############################################################################
#>
#
# Replaces return for strings
#
#<
##############################################################################
p6_return() {

    p6_echo "$@"
    return
}
